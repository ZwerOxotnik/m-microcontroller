[entity-name]
microcontroller=MicroController
microcontroller-ram=RAM Module

[entity-description]
microcontroller=Program logic using FAL (Factorio Assembly Language) and handle signals like a pro.
microcontroller-ram=A module MicroControllers can read and write to. Place adjacent to a MicroController.

[item-name]
microcontroller=MicroController

[virtual-signal-name]
signal-mc-halt=Halt Signal
signal-mc-run=Run Signal
signal-mc-step=Step Signal
signal-mc-sleep=Sleep Signal
signal-mc-jump=Jump Signal

[mod-description]
m-microcontroller=program circuit network logic using FAL, a Factorio Assembly Language.\nAuthor: Luke Perkin. Modified by ZwerOxotnik and by contributors

[mod-name]
m-microcontroller=MicroController

[mod-setting-name]
mc_update_tick_time=Update tick time

[mod-setting-description]
mc_update_tick_time=MicroControllers execute an action each Nth tick

[technology-name]
microcontroller=MicroControllers
microcontroller-program-size=MicroController program size

[microcontroller]
wiki=FAL's compact wiki
syntax=Syntax
example=Example
hover-text-hint=Hover over text to see tooltip
doc.overview=overview
doc.overview_description=The Factorio Assembly Language is the future of automated manufacture. Designed ground-up for use in large-scale factories. The Factorio Assembly Language has over op-codes and the MicroController (Factorio MicroController Unit) can store 32 instructions or more thanks to the technologies. The MicroController has 4 internal read/write registers as well as 4 read-only registers.
doc.glossary=glossary
doc.glossary_description=
doc.basic_instructions_set=Basic instructions set
doc.basic_instructions_set_description=
doc.arithmetic_instructions=Arithmetic instructions
doc.arithmetic_instructions_description=
doc.test_instructions=Test instructions
doc.test_instructions_description=Test instructions will skip the next instruction if the test is successful.
doc.blocking_instructions=Blocking instructions
doc.blocking_instructions_description=Blocking instructions will pause the program until the operation is complete
doc.interrupt_signals=Interrupt signals
doc.interrupt_signals_description=There are 5 special signals that can be used to interrupt a program.\nWhen an MicroController receives an interrupt signal on either it's Green or Red Wire Input I will immediately execute the interrupt.
doc.old-help-text=Prev help text
doc.old-help-text_description=
doc.pointers=Pointers
doc.pointers_description=When specifying a memory address as a parameter to an instruction, you may also pass a memory pointer. A pointer is a special address were the literal address is evaluated at run-time.\n\nTypically a memory address takes the form memN. This instructs the MicroController to access the 1st Register. A pointer takes the from MEM@1. This instructs the MicroController to read the Value at Register 1 and then read the Value at Register N, where N was the Value at Register 1.
doc.example_programs=Example programs
doc.example_programs_description=
topics.registers=[color=yellow]0.1[/color] Registers
topics.registers_description=The MicroController has 4 internal read-write registers:\nmem1 mem2 mem3 mem4\n\nIt also has 4 read-only registers:\nmem5 or ipt: Instruction pointer index.\nmem6 or cnr: Number of Signals on the Red Wire Input.\nmem7 or cng: Number of Signals on the Green Wire Input.\nmem8 or clk: Monotonic clock.
topics.mapped-memory=[color=yellow]0.2[/color] Mapped memory
topics.mapped-memory_description=The MicroController can be extended with RAM module. The MicroController has 4 external memory ports:\nNorth Port 01 is mapped to MEM11-14.\nSouth Port 01 is mapped to MEM21-42.\nNorth Port 02 is mapped to MEM31-34.\nSouth Port 02 is mapped to MEM41-44.\nYou can also connect an external MicroController to North and South Port 01.
topics.signal_glossary=[color=yellow]1.1[/color] Signal
topics.signal_glossary_description=A Type and a signed integer value.
topics.type_glossary=[color=yellow]1.2[/color] Type
topics.type_glossary_description=Each signal contains a Type. The type could either refer to an item your factory consumes or produces or could be a ‘virtual’ type.
topics.value_glossary=[color=yellow]1.3[/color] Value
topics.value_glossary_description=The integer part of a Signal.
topics.move_glossary=[color=yellow]1.4[/color] Move
topics.move_glossary_description=Copy a Signal from one register to another.
topics.set_glossary=[color=yellow]1.5[/color] Set
topics.set_glossary_description=Set the Value of a Signal to another Value.
topics.register_glossary=[color=yellow]1.6[/color] Register
topics.register_glossary_description=Register A unit of memory that can store one Signal.
topics.clear_glossary=[color=yellow]1.7[/color] Clear
topics.clear_glossary_description=Reset a Register to NULL.
topics.null_glossary=[color=yellow]1.8[/color] NULL
topics.null_glossary_description=A Virtual Black Signal with a Value of 0.
topics.label_glossary=[color=yellow]1.9[/color] Label
topics.label_glossary_description=A text identifier used for the jumps.
topics.description_BIS=Each MicroController can only read one instruction per Nth tick.(customuzible)
topics.description_BIS_description=60 ticks ~= 1 second
topics.comments_BIS=[color=yellow]2.1[/color] Comments
topics.comments_BIS_description=All text after the comment
topics.labels_BIS=[color=yellow]2.2[/color] Labels
topics.labels_BIS_description=Labels are used as identifiers for the jump instructions.\nA label is a colon followed by text.\nWhen using a label in a jump instruction you must also include the colon.
topics.NOP_BIS=[color=yellow]2.3[/color] NOP
topics.NOP_BIS_description=NOP stands for no-operation. It has no effect on the state of the internal registers.\nIt will still take N ticks for an MicroController to read a NOP instruction.
topics.MOV_BIS=[color=yellow]2.4[/color] MOV
topics.MOV_BIS_description=Takes the Signal at <SRC> and writes it to all <DST> Register(s).
topics.SET_BIS=[color=yellow]2.5[/color] SET
topics.SET_BIS_description=Takes the Value at <SRC> and write it to <DST>
topics.SWP_BIS=[color=yellow]2.6[/color] SWP
topics.SWP_BIS_description=Swaps the Signals in <SRC> and <DST>.
topics.CLR_BIS=[color=yellow]2.7[/color] CLR
topics.CLR_BIS_description=Writes NULL to all <DST> Register(s).
topics.FIG_BIS=[color=yellow]2.8[/color] Find In Green
topics.FIG_BIS_description=Looks for a Signal in the Green Wire Input where the Signal Type is equal to the type at <SRC>.\nIf a signal is found it is written to memN.
topics.FIR_BIS=[color=yellow]2.9[/color] Find In Red
topics.FIR_BIS_description=Looks for a Signal in the Red Wire Input where the Signal Type is equal to the type at <SRC>.\nIf a signal is found it is written to memN.
topics.JMP_BIS=[color=yellow]2.10[/color] JMP
topics.JMP_BIS_description=Jumps the instruction pointer to <SRC>.\nIf <SRC> is a literal integer, the instruction pointer jumps to that line.\nIf <SRC> is a Register, the instruction pointer jumps to line N where N is the value at the Register.\nIf <SRC> is a Label, the instruction pointer jumps to the first declaration of that Label.
topics.HLT_BIS=[color=yellow]2.11[/color] HLT
topics.HLT_BIS_description=Halts the program
topics.ADD_AI=[color=yellow]3.1[/color] ADD
topics.ADD_AI_description=Adds the Value at <SRC> to the Value at <DST> and writes the result to memN.
topics.SUB_AI=[color=yellow]3.2[/color] SUB
topics.SUB_AI_description=Subtracts the Value at <DST> from the Value at <SRC> and writes the result to memN.
topics.MUL_AI=[color=yellow]3.3[/color] MUL
topics.MUL_AI_description=Multiplies the Value at <SRC> by the Value at <DST> and writes the result to memN.
topics.DIV_AI=[color=yellow]3.4[/color] DIV
topics.DIV_AI_description=Divides the Value at <SRC> by the Value at <DST> and writes the result to memN.
topics.MOD_AI=[color=yellow]3.5[/color] MOD
topics.MOD_AI_description=Executes <SRC> modulo <DST> and writes the result to memN.
topics.POW_AI=[color=yellow]3.6[/color] POW
topics.POW_AI_description=Raises <SRC> to the power of <DST> and writes the result to memN.\n[color=yellow]Arithmetic instructions ignore Signal Type.[/color]
topics.DIG_AI=[color=yellow]3.7[/color] DIG
topics.DIG_AI_description=Reads the digit at position <SRC> from memN and writes the result to memN.
topics.DIS_AI=[color=yellow]3.8[/color] DIS
topics.DIS_AI_description=Writes <DST> to the digit at position <SRC> in memN.\nIf <DST> is more than 1 digit long, it writes the 1st digit.
topics.BND_AI=[color=yellow]3.9[/color] BITWISE AND
topics.BND_AI_description=Executes <SRC> AND <DST> then writes the result to memN.
topics.BOR_AI=[color=yellow]3.10[/color] BITWISE OR
topics.BOR_AI_description=Executes <SRC> OR <DST> then writes the result to memN.
topics.BXR_AI=[color=yellow]3.11[/color] BITWISE XOR
topics.BXR_AI_description=Executes <SRC> XOR <DST> then writes the result to memN.
topics.BND2_AI=[color=yellow]3.12[/color] BITWISE NOT
topics.BND2_AI_description=Executes NOT <SRC> then writes the result to memN.
topics.BLS_AI=[color=yellow]3.13[/color] BITWISE LEFT SHIFT
topics.BLS_AI_description=Shifts bits in <SRC> by <DST> to the left, then writes the result to memN.
topics.BRS_AI=[color=yellow]3.14[/color] BITWISE RIGHT SHIFT
topics.BRS_AI_description=Shifts bits in <SRC> by <DST> to the right, then writes the result to memN.
topics.BLR_AI=[color=yellow]3.15[/color] BITWISE LEFT ROTATE
topics.BLR_AI_description=Rotate bits in <SRC> by <DST> to the left, then writes the result to memN
topics.BRR_AI=[color=yellow]3.16[/color] BITWISE RIGHT ROTATE
topics.BRR_AI_description=Rotate bits in <SRC> by <DST> to the right, then writes the result to memN.
topics.TGT_TI=[color=yellow]4.1[/color] TEST GREATER THAN
topics.TGT_TI_description=Tests if <SRC> Value is greater than <DST> Value.
topics.TLT_TI=[color=yellow]4.2[/color] TEST LESS THAN
topics.TLT_TI_description=Tests if <SRC> Value is less than <DST> Value.
topics.TEQ_TI=[color=yellow]4.3[/color] TEST EQUAL TO
topics.TEQ_TI_description=Tests if <SRC> Value is equal to <DST> Value
topics.TTE_TI=[color=yellow]4.4[/color] TEST TYPES EQUAL
topics.TTE_TI_description=Tests if <SRC> Type is equal to <DST> Type.
topics.TTN_TI=[color=yellow]4.5[/color] TEST TYPES NOT EQUAL
topics.TTN_TI_description=Tests if <SRC> Type is not equal to <DST> Type.
topics.SLP_BI=[color=yellow]5.1[/color] SLP
topics.SLP_BI_description=Program will sleep for <SRC> ticks.
topics.BKR_BI=[color=yellow]5.2[/color] BKR
topics.BKR_BI_description=Pause the program until there is at least <SRC> Signals on the Red Wire Input.
topics.BKG_BI=[color=yellow]5.3[/color] BKG
topics.BKG_BI_description=Pause the program until there is at least <SRC> Signals on the Green Wire Input.
topics.SYN_BI=[color=yellow]5.4[/color] SYN
topics.SYN_BI_description=Pause the program until all other connected MicroControllers call SYN.
topics.HLT_IS=[color=yellow]6.1[/color] HLT
topics.HLT_IS_description=Halts the program
topics.RUN_IS=[color=yellow]6.2[/color] RUN
topics.RUN_IS_description=Runs the program
topics.STP_IS=[color=yellow]6.3[/color] STP
topics.STP_IS_description=Steps the program (executes the current instruction then halts).
topics.SLP_IS=[color=yellow]6.4[/color] SLP
topics.SLP_IS_description=Program will sleep for N ticks, where N is the Signal’s Value.
topics.JMP_IS=[color=yellow]6.5[/color] JMP
topics.JMP_IS_description=Jumps the Program Instruction Pointer to N, where N is the Signal’s Value.
topics.MEM_pointer=[color=yellow]7.1[/color] MEM@N
topics.MEM_pointer_description=Access register X, where X is the Value at Register N.
topics.RED_pointer=[color=yellow]7.2[/color] RED@N
topics.RED_pointer_description=Access Red Wire Input X, where X is the Value at Register N.
topics.GREEN_pointer=[color=yellow]7.3[/color] GREEN@N
topics.GREEN_pointer_description=Access Green Wire Input X, where X is the Value at Register N.
topics.MULTIPLY_INPUT_EP=[color=yellow]8.1[/color] MULTIPLY INPUT
topics.MULTIPLY_INPUT_EP_description=This program takes the 1st Red Wire Input, doubles it and outputs the result.
topics.ACCUMULATE_INPUT_EP=[color=yellow]8.2[/color] ACCUMULATE INPUT
topics.ACCUMULATE_INPUT_EP_description=This program takes the first 4 Signals on the Red Wire Input and accumulates them over time.\nIt requires a RAM module at North Port 01.
