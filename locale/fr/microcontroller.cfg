[entity-name]
microcontroller=Microcontrôleur
microcontroller-ram=Barrette de RAM

[entity-description]
microcontroller=Programmez la logique en utilisant le FAL (Factorio Assembly Language) et traitez les signaux comme un pro.
microcontroller-ram=Un module que les microcontrôleurs peuvent lire et écrire. A placer à côté d'un MicroContrôleur.

[item-name]
microcontroller=MicroContrôleur

[virtual-signal-name]
signal-mc-halt=Signal halt
signal-mc-run=Signal run
signal-mc-step=Signal step
signal-mc-sleep=Signal sleep
signal-mc-jump=Signal jump

[mod-description]
m-microcontroller=programmer le réseau logique en utilisant FAL, un langage assembleur de Factorio.\nAuthor : Luke Perkin. Modifié par ZwerOxotnik et par d'autres contributeurs.

[mod-name]
m-microcontroller=Microcontrôleur

[mod-setting-name]
mc_update_tick_time=Temps en ticks par instruction

[mod-setting-description]
mc_update_tick_time=Les microcontrôleurs exécutent une action tous les N ticks

[technology-name]
microcontroller=Microcontrôleurs
microcontroller-program-size=Taille du programme du microcontrôleur

[microcontroller]
wiki=Le wiki compact de FAL
syntax=Syntaxe
example=Exemple
hover-text-hint=Passez la souris sur le texte pour voir l'info-bulle
doc.overview=aperçu
doc.overview_description=Le FAL est l'avenir de la fabrication automatisée. Conçu de A à Z pour être utilisé dans des usines à grande échelle. Le FAL comporte plus d'op-codes et le microcontrôleur (Factorio MicroController Unit) peut stocker 32 instructions ou plus grâce aux technologies. Le microcontrôleur possède 4 registres internes en lecture/écriture ainsi que 4 registres en lecture seule.
doc.glossary=glossaire
doc.glossary_description=
doc.basic_instructions_set=Jeu d'instructions de base
doc.basic_instructions_set_description=
doc.arithmetic_instructions=Instructions arithmétiques
doc.arithmetic_instructions_description=
doc.test_instructions=Instructions de test
doc.test_instructions_description=Les instructions de test sautent l'instruction suivante si le test est réussi.
doc.blocking_instructions=Instructions de blocage
doc.blocking_instructions_description=Les instructions de blocage mettent le programme en pause jusqu'à ce que l'opération soit terminée.
doc.interrupt_signals=Signaux d'interruption
doc.interrupt_signals_description=Il existe 5 signaux spéciaux qui peuvent être utilisés pour interrompre un programme. Lorsqu'un microcontrôleur reçoit un signal d'interruption sur son entrée de fil vert ou rouge, il exécute immédiatement l'interruption.
doc.old-help-text=Texte d'aide précédent
doc.old-help-text_description=
doc.pointers=Pointeurs
doc.pointers_description=Lorsque vous spécifiez une adresse mémoire en tant que paramètre d'une instruction, vous pouvez également transmettre un pointeur mémoire. Un pointeur est une adresse spéciale dont l'adresse littérale est évaluée au moment de l'exécution.\n\nEn général, une adresse mémoire prend la forme memN. Cela indique au microcontrôleur d'accéder au 1er registre. Un pointeur prend la forme MEM@1, ce qui indique au microcontrôleur de lire la valeur du registre 1, puis de lire la valeur du registre N, où N est la valeur du registre 1.
doc.example_programs=Exemples de programmes
doc.example_programs_description=
topics.registers=[color=yellow]0.1[/color] Registres
topics.registers_description=Le microcontrôleur possède 4 registres internes en lecture-écriture :\nmem1 mem2 mem3 mem4\n\nIl possède également 4 registres en lecture seule :\nmem5 ou ipt : Index du pointeur d'instruction. \NMem6 ou cnr : Nombre de signaux sur l'entrée du fil rouge.\Nmem7 ou cng : Nombre de signaux sur l'entrée du fil vert.\Nmem8 ou clk : Horloge monotone.
topics.mapped-memory=[color=yellow]0.2[/color] Mémoire mappée
topics.mapped-memory_description=Le MicroContrôleur peut être étendu avec un module RAM. Le microcontrôleur dispose de 4 ports de mémoire externe : le port nord 01 est mappé sur MEM11-14.\Nle port sud 01 est mappé sur MEM21-42.\NLe port nord 02 est mappé sur MEM31-34.\NLe port sud 02 est mappé sur MEM41-44.\NVous pouvez également connecter un microcontrôleur externe aux ports nord et sud 01.
topics.signal_glossary=[color=yellow]1.1[/color] Signal
topics.signal_glossary_description=Un type et une valeur entière signée.
topics.type_glossary=[color=yellow]1.2[/color] Type
topics.type_glossary_description=Chaque signal contient un Type. Le type peut soit faire référence à un item que votre usine consomme ou produit, soit être un type virtuel.
topics.value_glossary=[color=yellow]1.3[/color] Valeur
topics.value_glossary_description=La partie entière d'un signal.
topics.move_glossary=[color=yellow]1.4[/color] Déplacer
topics.move_glossary_description=Copier un signal d'un registre à un autre.
topics.set_glossary=[color=yellow]1.5[/color] Définir
topics.set_glossary_description=Fixe la valeur d'un signal à une autre valeur.
topics.register_glossary=[color=yellow]1.6[/color] Registre
topics.register_glossary_description=Registre Une unité de mémoire qui peut stocker un signal.
topics.clear_glossary=[color=yellow]1.7[/color] Effacer
topics.clear_glossary_description=Remettre un registre à NULL.
topics.null_glossary=[color=yellow]1.8[/color] NULL
topics.null_glossary_description=Un signal virtuel noir avec une valeur de 0.
topics.label_glossary=[color=yellow]1.9[/color]Label
topics.label_glossary_description=Un identifiant texte utilisé pour les sauts.
topics.description_BIS=Chaque microcontrôleur ne peut lire qu'une instruction tous les N ticks.(personnalisable)
topics.description_BIS_description=60 ticks ~= 1 seconde
topics.comments_BIS=[color=yellow]2.1[/color] Commentaires
topics.comments_BIS_description=Tout le texte après le commentaire
topics.labels_BIS=[color=yellow]2.2[/color]Labels
topics.labels_BIS_description=Les labels sont utilisées comme identifiants pour les instructions de saut.\NUn label est un deux-points suivi d'un texte.\nLorsque vous utilisez un label dans une instruction de saut, vous devez également inclure les deux-points.
topics.NOP_BIS=[color=yellow]2.3[/color] NOP
topics.NOP_BIS_description=NOP est l'abréviation de no-operation. Elle n'a aucun effet sur l'état des registres internes. Il faut toujours N ticks pour qu'un microcontrôleur lise une instruction NOP.
topics.MOV_BIS=[color=yellow]2.4[/color] MOV
topics.MOV_BIS_description=Prend le signal à <SRC> et l'écrit dans tous les registres <DST>.
topics.SET_BIS=[color=yellow]2.5[/color] SET
topics.SET_BIS_description=Prend la valeur de <SRC> et l'écrit dans <DST>.
topics.SWP_BIS=[color=yellow]2.6[/color] SWP
topics.SWP_BIS_description=Échange les signaux dans <SRC> et <DST>.
topics.CLR_BIS=[color=yellow]2.7[/color] CLR
topics.CLR_BIS_description=Ecrit NULL dans tous les registres <DST>.
topics.FIG_BIS=[color=yellow]2.8[/color] Trouver dans le fil vert
topics.FIG_BIS_description=Recherche un signal dans l'entrée du fil vert où le type de signal est égal au type de <SRC>.\NSi un signal est trouvé, il est écrit dans memN.
topics.FIR_BIS=[color=yellow]2.9[/color] Trouver dans le fil rouge
topics.FIR_BIS_description=Recherche un signal dans l'entrée du fil rouge où le type de signal est égal au type de <SRC>.\NSi un signal est trouvé, il est enregistré dans memN.
topics.JMP_BIS=[color=yellow]2.10[/color] JMP
topics.JMP_BIS_description=Fait sauter le pointeur d'instruction à <SRC>.\nSi <SRC> est un entier littéral, le pointeur d'instruction saute à cette ligne.\nSi <SRC> est un registre, le pointeur d'instruction saute à la ligne N où N est la valeur du registre.\nSi <SRC> est un label, le pointeur d'instruction saute à la première déclaration de ce label.
topics.HLT_BIS=[color=yellow]2.11[/color] HLT
topics.HLT_BIS_description=Arrête le programme
topics.ADD_AI=[color=yellow]3.1[/color] ADD
topics.ADD_AI_description=Additione la valeur à <SRC> à la valeur à <DST> et écrit le résultat dans memN.
topics.SUB_AI=[color=yellow]3.2[/color] SUB
topics.SUB_AI_description=Soustrait la valeur de <DST> de la valeur de <SRC> et écrit le résultat dans memN.
topics.MUL_AI=[color=yellow]3.3[/color] MUL
topics.MUL_AI_description=Multiplie la valeur de <SRC> par la valeur de <DST> et écrit le résultat dans memN.
topics.DIV_AI=[color=yellow]3.4[/color] DIV
topics.DIV_AI_description=Divise la valeur de <SRC> par la valeur de <DST> et écrit le résultat dans memN.
topics.MOD_AI=[color=yellow]3.5[/color] MOD
topics.MOD_AI_description=Exécute <SRC> modulo <DST> et écrit le résultat dans memN.
topics.POW_AI=[color=yellow]3.6[/color] POW
topics.POW_AI_description=Elève <SRC> à la puissance de <DST> et écrit le résultat dans memN.\n[color=yellow]Les instructions arithmétiques ignorent le type de signal.[/color]
topics.DIG_AI=[color=yellow]3.7[/color] DIG
topics.DIG_AI_description=Lit le chiffre à la position <SRC> dans memN et écrit le résultat dans memN.
topics.DIS_AI=[color=yellow]3.8[/color] DIS
topics.DIS_AI_description=Ecrit <DST> sur le chiffre à la position <SRC> dans memN.\nSi <DST> est long de plus d'un chiffre, il écrit le 1er chiffre.
topics.BND_AI=[color=yellow]3.9[/color] ET bit à bit
topics.BND_AI_description=Exécute <SRC> ET <DST> puis écrit le résultat dans memN.
topics.BOR_AI=[color=yellow]3.10[/color] OU bit à bit
topics.BOR_AI_description=Exécute <SRC> OU <DST> puis écrit le résultat dans memN.
topics.BXR_AI=[color=yellow]3.11[/color] OU exclusif bit à bit
topics.BXR_AI_description=Exécute <SRC> XOR <DST> puis écrit le résultat dans memN.
topics.BND2_AI=[color=yellow]3.12[/color]NOT bit à bit
topics.BND2_AI_description=Exécute NOT <SRC> puis écrit le résultat dans memN.
topics.BLS_AI=[color=yellow]3.13[/color] Décalage à gauche par bit
topics.BLS_AI_description=Décale les bits dans <SRC> par <DST> vers la gauche, puis écrit le résultat dans memN.
topics.BRS_AI=[color=yellow]3.14[/color] Décalage à droite par bit
topics.BRS_AI_description=Décale les bits de <SRC> par <DST> vers la droite, puis écrit le résultat dans memN.
topics.BLR_AI=[color=yellow]3.15[/color] Rotation à gauche par bit
topics.BLR_AI_description=Fait pivoter les bits dans <SRC> par <DST> vers la gauche, puis écrit le résultat dans memN.
topics.BRR_AI=[color=yellow]3.16[/color] Rotation à droite par bit
topics.BRR_AI_description=Fait pivoter les bits dans <SRC> par <DST> vers la droite, puis écrit le résultat dans memN.
topics.TGT_TI=[color=yellow]4.1[/color] TEST supérieur à
topics.TGT_TI_description=Teste si la valeur <SRC> est supérieure à la valeur <DST>.
topics.TLT_TI=[color=yellow]4.2[/color] TEST inférieur à
topics.TLT_TI_description=Teste si la valeur <SRC> est inférieure à la valeur <DST>.
topics.TEQ_TI=[color=yellow]4.3[/color] TEST égal à
topics.TEQ_TI_description=Teste si la valeur <SRC> est égale à la valeur <DST>.
topics.TTE_TI=[color=yellow]4.4[/color] TEST même type
topics.TTE_TI_description=Teste si le Type <SRC> est égal au Type <DST>.
topics.TTN_TI=[color=yellow]4.5[/color] TEST types différents
topics.TTN_TI_description=Teste si le type <SRC> n'est pas égal au type <DST>.
topics.SLP_BI=[color=yellow]5.1[/color] SLP
topics.SLP_BI_description=Le programme se met en veille pendant <SRC> ticks.
topics.BKR_BI=[color=yellow]5.2[/color] BKR
topics.BKR_BI_description=Pause du programme jusqu'à ce qu'il y ait au moins <SRC> Signaux sur l'entrée du fil rouge.
topics.BKG_BI=[color=yellow]5.3[/color] BKG
topics.BKG_BI_description=Pause du programme jusqu'à ce qu'il y ait au moins <SRC> Signaux sur l'entrée du fil vert.
topics.SYN_BI=[color=yellow]5.4[/color] SYN
topics.SYN_BI_description=Pause du programme jusqu'à ce que tous les autres microcontrôleurs connectés appellent SYN.
topics.HLT_IS=[color=yellow]6.1[/color] HLT
topics.HLT_IS_description=Arrête le programme
topics.RUN_IS=[color=yellow]6.2[/color] RUN
topics.RUN_IS_description=Exécute le programme
topics.STP_IS=[color=yellow]6.3[/color] STP
topics.STP_IS_description=Exécute une instruction.
topics.SLP_IS=[color=yellow]6.4[/color] SLP
topics.SLP_IS_description=Le programme va dormir pendant N ticks, où N est la valeur du signal.
topics.JMP_IS=[color=yellow]6.5[/color] JMP
topics.JMP_IS_description=Saute le pointeur d'instruction du programme à N, où N est la valeur du signal.
topics.MEM_pointer=[color=yellow]7.1[/color] MEM@N
topics.MEM_pointer_description=Accède au registre X, où X est la valeur du registre N.
topics.RED_pointer=[color=yellow]7.2[/color] RED@N
topics.RED_pointer_description=Accès à l'entrée X du fil rouge, où X est la valeur du registre N.
topics.GREEN_pointer=[color=yellow]7.3[/color] VERT@N
topics.GREEN_pointer_description=Accès à l'entrée X du fil vert, où X est la valeur du registre N.
topics.MULTIPLY_INPUT_EP=[color=yellow]8.1[/color] MULTIPLY INPUT
topics.MULTIPLY_INPUT_EP_description=Ce programme prend la première entrée du fil rouge, la double et sort le résultat.
topics.ACCUMULATE_INPUT_EP=[color=yellow]8.2[/color] ENTRÉE D'ACCUMULATION
topics.ACCUMULATE_INPUT_EP_description=Ce programme prend les 4 premiers signaux de l'entrée fil rouge et les cumule dans le temps. Il nécessite un module RAM au port nord 01.
