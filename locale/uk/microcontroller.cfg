[entity-name]
microcontroller=МікроКонтролер
microcontroller-ram=RAM модуль

[entity-description]
microcontroller=Програмуйте логіку за допомогою FAL (Factorio Assembly Language) і обробляйте сигнали як професіонал.
microcontroller-ram=Модуль, до якого МікроКонтролери можуть зчитувати та записувати дані. Розміщується поруч з МікроКонтролером.

[item-name]
microcontroller=МікроКонтролер

[virtual-signal-name]
signal-mc-halt=Сигнал "Стоп"
signal-mc-run=Сигнал до запуску
signal-mc-step=Сигнал кроку
signal-mc-sleep=Сигнал сну
signal-mc-jump=Сигнал стрибка

[mod-description]
m-microcontroller=запрограмувати мережеву логіку схеми за допомогою FAL, мови асемблера Факторіо.\nАвтор: Luke Perkin. Модифіковано ZwerOxotnik та іншими учасниками

[mod-name]
m-microcontroller=МікроКонтролер

[mod-setting-name]
mc_update_tick_time=Час оновлення тику

[mod-setting-description]
mc_update_tick_time=МікроКонтролери виконують дію кожен N-й такт

[technology-name]
microcontroller=МікроКонтролери
microcontroller-program-size=Розмір програми для МікроКонтролера

[microcontroller]
wiki=Компактна вікі FAL
syntax=Синтаксис
example=Наприклад
hover-text-hint=Наведіть курсор на текст, щоб побачити підказку
doc.overview=огляд
doc.overview_description=Мова асемблера Factorio - це майбутнє автоматизованого виробництва. Розроблена з нуля для використання на великих заводах. Мова асемблера Factorio має більше операційних кодів, а МікроКонтролер (блок мікроконтролера Factorio) може зберігати 32 інструкції або більше завдяки технологіям. МікроКонтролер має 4 внутрішні регістри для читання/запису, а також 4 регістри тільки для читання.
doc.glossary=словник
doc.basic_instructions_set=Базовий набір інструкцій
doc.arithmetic_instructions=Арифметичні вказівки
doc.test_instructions=Інструкція з тестування
doc.test_instructions_description=Якщо тест пройдено успішно, наступна інструкція буде пропущена.
doc.blocking_instructions=Інструкції з блокування
doc.blocking_instructions_description=Блокувальні інструкції призупинять програму до завершення операції
doc.interrupt_signals=Сигнали переривання
doc.interrupt_signals_description=Існує 5 спеціальних сигналів, які можна використовувати для переривання програми.\nКоли МікроКонтролер отримує сигнал переривання на зелений або червоний вхід, я негайно виконую переривання.
doc.old-help-text=Попередній текст довідки
doc.pointers=Покажчики
doc.pointers_description=При вказуванні адреси пам'яті як параметра інструкції, ви також можете передати вказівник на пам'ять. Покажчик - це спеціальна адреса, за якою обчислюється літеральна адреса під час виконання програми.\n\nТипово адреса пам'яті має вигляд memN. Це вказує МікроКонтролеру на доступ до 1-го регістру. Покажчик береться з MEM@1. Це вказує МікроКонтролеру прочитати значення в регістрі 1, а потім прочитати значення в регістрі N, де N було значенням в регістрі 1.
doc.example_programs=Приклади програм
topics.registers=[color=yellow]0.1[/color] Реєстри
topics.registers_description=МікроКонтролер має 4 внутрішніх регістри для читання і запису:\nmem1 mem2 mem3 mem4\n\nВін також має 4 регістри тільки для читання:\nmem5 або ipt: Індекс вказівника команд.\nmem6 або cnr: Кількість сигналів на вході червоного дроту.\nmem7 або cng: Кількість сигналів на вході зеленого дроту.\nmem8 або clk: Монотонний годинник.
topics.mapped-memory=[color=yellow]0.2[/color] Відображена пам'ять
topics.mapped-memory_description=МікроКонтролер можна розширити за допомогою модуля оперативної пам'яті. МікроКонтролер має 4 порти зовнішньої пам'яті:\nПівнічний порт 01 відповідає MEM11-14.\nПівденний порт 01 відповідає MEM21-42.\nПівнічний порт 02 відповідає MEM31-34.\nПівденний порт 02 відповідає MEM41-44.\nВи також можете підключити зовнішній мікроконтролер до північного та південного порту 01.
topics.signal_glossary=[color=yellow]1.1[/color] Сигнал
topics.signal_glossary_description=Тип і знакове ціле значення.
topics.type_glossary=[color=yellow]1.2[/color] Тип
topics.type_glossary_description=Кожен сигнал містить тип. Тип може стосуватися товару, який споживає або виробляє ваша фабрика, або може бути "віртуальним" типом.
topics.value_glossary=[color=yellow]1.3[/color] Значення
topics.value_glossary_description=Ціла частина Сигналу.
topics.move_glossary=[color=yellow]1.4[/color] Переміщення
topics.move_glossary_description=Копіювання Сигналу з одного реєстру в інший.
topics.set_glossary=[color=yellow]1.5[/color] Набір
topics.set_glossary_description=Встановити значення сигналу на інше значення.
topics.register_glossary=[color=yellow]1.6[/color] Реєстри
topics.register_glossary_description=Регістр Одиниця пам'яті, яка може зберігати один Сигнал.
topics.clear_glossary=[color=yellow]1.7[/color] Очищення
topics.clear_glossary_description=Скинути регістр на NULL.
topics.null_glossary=[color=yellow]1.8[/color] НУЛЬ
topics.null_glossary_description=Віртуальний чорний сигнал зі значенням 0.
topics.label_glossary=[color=yellow]1.9[/color] Мітка
topics.label_glossary_description=Текстовий ідентифікатор, який використовується для переходів.
topics.description_BIS=Кожен мікроконтролер може зчитувати лише одну інструкцію за N-й такт (налаштовується)
topics.description_BIS_description=60 тиків ~= 1 секунда
topics.comments_BIS=[color=yellow]2.1[/color] Коментарі
topics.comments_BIS_description=Весь текст після коментаря
topics.labels_BIS=[color=yellow]2.2[/color] Мітки
topics.labels_BIS_description=Мітки використовуються як ідентифікатори для команд переходу.\nМітка - це двокрапка, за якою йде текст.\nПри використанні мітки в команді переходу ви також повинні додати двокрапку.
topics.NOP_BIS=[color=yellow]2.3[/color] НІ
topics.NOP_BIS_description=NOP означає "бездіяльність". Вона не впливає на стан внутрішніх регістрів.\nМікроКонтролеру все одно знадобиться N тиків, щоб прочитати інструкцію NOP.
topics.MOV_BIS=[color=yellow]2.4[/color] РУХ
topics.MOV_BIS_description=Приймає Сигнал на <SRC> і записує його до всіх регістрів <DST>.
topics.SET_BIS=[color=yellow]2.5[/color] НАЛ
topics.SET_BIS_description=Бере значення в <SRC> і записує його в <DST>
topics.SWP_BIS=[color=yellow]2.6[/color] ЗМІН
topics.SWP_BIS_description=Міняє місцями сигнали у <SRC> та <DST>.
topics.CLR_BIS=[color=yellow]2.7[/color] ЧИСТ
topics.CLR_BIS_description=Записує NULL до всіх <DST> регістрів.
topics.FIG_BIS=[color=yellow]2.8[/color] Знайти в зеленому
topics.FIG_BIS_description=Шукає сигнал на вході зеленого дроту, де тип сигналу дорівнює типу у <SRC>.\nЯкщо сигнал знайдено, він записується до пам'яті memN.
topics.FIR_BIS=[color=yellow]2.9[/color] Знайти в червоному
topics.FIR_BIS_description=Шукає сигнал на вході червоного дроту, де тип сигналу дорівнює типу у <SRC>.\nЯкщо сигнал знайдено, він записується до пам'яті memN.
topics.JMP_BIS=[color=yellow]2.10[/color] СТРИБ
topics.JMP_BIS_description=Переміщує вказівник інструкції на <SRC>.\nЯкщо <SRC> є цілим літералом, вказівник інструкції переходить на цей рядок.\nЯкщо <SRC> є регістром, вказівник інструкції переходить на рядок N, де N є значенням у регістрі.\nЯкщо <SRC> є міткою, вказівник інструкції переходить на перше оголошення цієї мітки.
topics.HLT_BIS=[color=yellow]2.11[/color] ЗУП
topics.HLT_BIS_description=Зупиняє програму
topics.ADD_AI=[color=yellow]3.1[/color] ДОДАТИ
topics.ADD_AI_description=Додає значення за адресою <SRC> до значення за адресою <DST> і записує результат у пам'ять memN.
topics.SUB_AI=[color=yellow]3.2[/color] ВІДН
topics.SUB_AI_description=Віднімає Значення в <DST> від Значення в <SRC> і записує результат в memN.
topics.MUL_AI=[color=yellow]3.3[/color] МНОЖ
topics.MUL_AI_description=Множить значення у <SRC> на значення у <DST> і записує результат у memN.
topics.DIV_AI=[color=yellow]3.4[/color] ДІЛ
topics.DIV_AI_description=Ділить Значення за адресою <SRC> на Значення за адресою <DST> і записує результат у пам'ять memN.
topics.MOD_AI=[color=yellow]3.5[/color] МОД
topics.MOD_AI_description=Виконує <SRC> за модулем <DST> і записує результат в memN.
topics.POW_AI=[color=yellow]3.6[/color] ПОТ
topics.POW_AI_description=Підносить <SRC> до степеня <DST> і записує результат у memN.\n[color=yellow]Арифметичні команди ігнорують тип сигналу[/color]
topics.DIG_AI=[color=yellow]3.7[/color] ПОЗ
topics.DIG_AI_description=Читає цифру у позиції <SRC> з memN і записує результат у memN.
topics.DIS_AI=[color=yellow]3.8[/color] ДИСТ
topics.DIS_AI_description=Записує <DST> до цифри у позиції <SRC> у memN.\nЯкщо <DST> має довжину більше 1 цифри, то записується 1-а цифра.
topics.BND_AI=[color=yellow]3.9[/color] ВИКОНАТИ І
topics.BND_AI_description=Виконує <SRC> І <DST>, а потім записує результат у memN.
topics.BOR_AI=[color=yellow]3.10[/color] ВИКОНАТИ АБО
topics.BOR_AI_description=Виконує <SRC> АБО <DST> і записує результат у memN.
topics.BXR_AI=[color=yellow]3.11[/color] ВИКОНАТИ XOR
topics.BXR_AI_description=Виконує <SRC> XOR <DST> і записує результат у memN.
topics.BND2_AI=[color=yellow]3.12[/color] ВИКОНАТИ NOT
topics.BND2_AI_description=Виконує NOT <SRC> і записує результат у memN.
topics.BLS_AI=[color=yellow]3.13[/color] ВИКОНАТИ LEFT SHIFT
topics.BLS_AI_description=Зсуває біти у <SRC> на <DST> вліво, потім записує результат у memN.
topics.BRS_AI=[color=yellow]3.14[/color] ВИКОНАТИ RIGHT SHIFT
topics.BRS_AI_description=Зсуває біти у <SRC> на <DST> праворуч, потім записує результат у memN.
topics.BLR_AI=[color=yellow]3.15[/color] ВИКОНАТИ ЛІВИЙ РОЗВОРОТ
topics.BLR_AI_description=Повертає біти в <SRC> на <DST> вліво, потім записує результат в memN
topics.BRR_AI=[color=yellow]3.16[/color] ВИКОНАТИ РОЗВОРОТ У ПРАВО
topics.BRR_AI_description=Повертає біти у <SRC> на <DST> вправо, а потім записує результат у memN.
topics.TGT_TI=[color=yellow]4.1[/color] ПЕРЕВІРИТИ БІЛЬШЕ, НІЖ
topics.TGT_TI_description=Перевіряє, чи значення <SRC> більше за значення <DST>.
topics.TLT_TI=[color=yellow]4.2[/color] ПЕРЕВІРИТИ МЕНШЕ, НІЖ
topics.TLT_TI_description=Перевіряє, чи значення <SRC> менше значення <DST>.
topics.TEQ_TI=[color=yellow]4.3[/color] ТЕСТ ДОРІВНЯЄ
topics.TEQ_TI_description=Перевіряє, чи значення <SRC> дорівнює значенню <DST>
topics.TTE_TI=[color=yellow]4.4[/color] ПЕРЕВІРИТИ РІВНІ ТИПІВ
topics.TTE_TI_description=Перевіряє, чи тип <SRC> дорівнює типу <DST>.
topics.TTN_TI=[color=yellow]4.5[/color] ТИПИ ТЕСТІВ НЕ ОДНАКОВІ
topics.TTN_TI_description=Перевіряє, чи тип <SRC> не дорівнює типу <DST>.
topics.SLP_BI=[color=yellow]5.1[/color] СОН
topics.SLP_BI_description=Програма буде спати протягом <SRC> тиків.
topics.BKR_BI=[color=yellow]5.2[/color] BKR
topics.BKR_BI_description=Призупиніть програму, доки на вході червоного дроту не з'явиться принаймні <SRC> сигналів.
topics.BKG_BI=[color=yellow]5.3[/color] BKG
topics.BKG_BI_description=Призупиніть програму, доки на вході зеленого дроту не з'явиться принаймні <SRC> сигналів.
topics.SYN_BI=[color=yellow]5.4[/color] СИН
topics.SYN_BI_description=Призупиніть програму, доки всі інші підключені мікроконтролери не викличуть SYN.
topics.HLT_IS=[color=yellow]6.1[/color] ЛІК
topics.HLT_IS_description=Зупиняє програму
topics.RUN_IS=[color=yellow]6.2[/color] БІГ
topics.RUN_IS_description=Запускає програму
topics.STP_IS=[color=yellow]6.3[/color] КРОК
topics.STP_IS_description=Крок за кроком виконує програму (виконує поточну інструкцію, а потім зупиняється).
topics.SLP_IS=[color=yellow]6.4[/color] СОН
topics.SLP_IS_description=Програма буде спати протягом N тиків, де N - значення сигналу.
topics.JMP_IS=[color=yellow]6.5[/color] СТРИБ
topics.JMP_IS_description=Переміщує вказівник програмної інструкції на N, де N - це значення сигналу.
topics.MEM_pointer=[color=yellow]7.1[/color] MEM@N
topics.MEM_pointer_description=Отримати доступ до регістру X, де X - значення у регістрі N.
topics.RED_pointer=[color=yellow]7.2[/color] RED@N
topics.RED_pointer_description=Отримати доступ до входу червоного дроту X, де X - це значення в регістрі N.
topics.GREEN_pointer=[color=yellow]7.3[/color] GREEN@N
topics.GREEN_pointer_description=Звернутися до входу X зеленого проводу, де X - це значення в регістрі N.
topics.MULTIPLY_INPUT_EP=[color=yellow]8.1[/color] ПОМНОЖИТИ ВНЕСОК
topics.MULTIPLY_INPUT_EP_description=Ця програма приймає вхідний сигнал 1-го червоного дроту, подвоює його і виводить результат.
topics.ACCUMULATE_INPUT_EP=[color=yellow]8.2[/color] НАКОПИЧУВАТИ ВХІДНІ ДАНІ
topics.ACCUMULATE_INPUT_EP_description=Ця програма приймає перші 4 сигнали на вході червоного дроту і накопичує їх протягом певного часу.\nДля цього потрібен модуль оперативної пам'яті у північному порту 01.


